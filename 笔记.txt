spawn 三个参数：模块名，函数名，参数列表  

self()返回自己的pid

register(some_atom, Pid)将把pid注册为名字some_atom   只在本节点有效  
跨界点发送时必须使用{some_atom, NodeName} ! msg发送消息

-record(server_opts,  
  {port,  
  ip="127.0.0.1",  
  max_connections=10}). 
  第一个参数是Record的名字   它有三个field：端口、IP和最大连接数 

 同步调用：客户端向服务端发送信息，一直等待答复
 异步调用：客户端向服务端发送消息，不管是否收到答复，继续运行。

 gen_server:start_link(ServerName, Module, Args, Options) -> Result
这个方法用来启动一个server，其中：
参数ServerName指定了服务名
参数Module指定了该server的callback模块
参数Args将作为服务初始化的启动参数（服务初始化时会调用：Module:init([Args])）
参数Options指定了一些特性参数，通常可以直接使用[] 

Module:init([Args])
这个方法会在服务初始化时被回调，参数Args就是gen_server:start_link中倒数第二个参数，若初始化成功，该方法放回{ok, State},其中State将作为启动服务的State

gen_server:call(ServerRef, Request)
这个方法供callback模块向ServerRef代表的服务发送Request请求（callback模块通常会在之上再封装一层接口供客户端调用，譬如这里的add，find方法），注意该方法是一个同步调用，它会一直等待服务器返回一个响应消息（除非等待超时，默认5s） 

Module:handle_call(Request, From, State) -> Result
这是一个回调方法，用来处理gen_server:call(ServerRef, Request)发出的请求，其中：
Request，表示客户端请求
From，表示请求来自哪个客户端
State，表示当前服务器状态

Result为handle_call 请求处理结果，它有以下几种类型
{reply,Reply,NewState}
{reply,Reply,NewState,Timeout}
{reply,Reply,NewState,hibernate}
{noreply,NewState}
{noreply,NewState,Timeout}
{noreply,NewState,hibernate}
{stop,Reason,Reply,NewState} | {stop,Reason,NewState}
这几种返回值有什么区别呢？
如果返回的是以reply开头，那么Reply将会作为响应返回给客户端
如果返回的是以noreply开头，那么服务器将不会返回任何消息给客户端（这会导致客户端阻塞，因为客户端调用的gen_server:call方法是一个同步调用，当它发出请求后，会一直等待服务器发送响应消息，除非等待超时） 

gen_server:cast(ServerRef, Request)
这个方法同gen_server:call(ServerRef, Request)，但它最大的区别就是该调用是异步的，它不需要等待服务器返回任何处理结果 

handle_cast(Request, State) -> Result
这个方法用来处理gen_server:cast(ServerRef, Request)发出的请求，由于不会返回结果给客户端，所以参数列表中也没有From 

 gen_tcp:recv/3 从指定 Socket中，读取Length长度的消息，Timeout为超时时间